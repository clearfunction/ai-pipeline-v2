name: Vue SPA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking (if using TypeScript)
      run: npm run type-check
      continue-on-error: true
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
    
    - name: Run component tests
      run: npm run test:component
      continue-on-error: true
    
    - name: Generate test coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Analyze bundle size
      run: npm run build:analyze
      continue-on-error: true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        sleep 5
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        sleep 5
    
    - name: Run accessibility tests
      run: |
        npx @axe-core/cli http://localhost:4173 --exit
        npm run test:a11y
      continue-on-error: true

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm run preview &
        sleep 5
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  visual-regression:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run visual regression tests
      run: npm run test:visual
      continue-on-error: true
    
    - name: Upload visual diff artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-diffs
        path: tests/visual/diffs/

  deploy-preview:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        VITE_APP_ENV: preview
        VITE_BASE_URL: /pr-${{ github.event.number }}
    
    - name: Deploy to preview environment
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        destination_dir: pr-${{ github.event.number }}
    
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Vue SPA Preview deployed! Check it out at: https://' + context.repo.owner + '.github.io/' + context.repo.repo + '/pr-' + context.issue.number
          })

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        VITE_APP_ENV: staging
        VITE_API_URL: ${{ vars.STAGING_API_URL }}
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying Vue SPA to staging environment"
        echo "This would typically deploy to your staging infrastructure"
        # Example: Deploy to staging S3 bucket, Netlify, Vercel, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, lighthouse, accessibility-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        VITE_APP_ENV: production
        VITE_API_URL: ${{ vars.PRODUCTION_API_URL }}
    
    - name: Deploy to production
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: ${{ vars.CUSTOM_DOMAIN }}
    
    - name: Run post-deployment smoke tests
      run: |
        sleep 30
        curl -f https://${{ vars.CUSTOM_DOMAIN || github.repository_owner + '.github.io/' + github.event.repository.name }}
        npm run test:smoke -- --url=https://${{ vars.CUSTOM_DOMAIN || github.repository_owner + '.github.io/' + github.event.repository.name }}
      continue-on-error: true
    
    - name: Update sitemap
      run: |
        echo "üó∫Ô∏è  Updating sitemap and search indexing"
        # This would typically ping search engines, update sitemap, etc.
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Vue SPA deployed successfully to production!"
        echo "üåê Available at: https://${{ vars.CUSTOM_DOMAIN || github.repository_owner + '.github.io/' + github.event.repository.name }}"
name: React Fullstack CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run backend linting
      run: npm run lint:backend
    
    - name: Run backend type checking
      run: npm run type-check:backend
    
    - name: Run database migrations
      run: npm run db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Run backend unit tests
      run: npm run test:backend:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Run backend integration tests
      run: npm run test:backend:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

  frontend-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run frontend linting
      run: npm run lint:frontend
    
    - name: Run frontend type checking
      run: npm run type-check:frontend
    
    - name: Run frontend unit tests
      run: npm run test:frontend:unit
      env:
        CI: true
    
    - name: Run frontend component tests
      run: npm run test:frontend:component
    
    - name: Build frontend
      run: npm run build:frontend
    
    - name: Generate test coverage
      run: npm run test:frontend:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: codecov-frontend

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build fullstack application
      run: npm run build
      env:
        NODE_ENV: test
    
    - name: Run database migrations
      run: npm run db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NODE_ENV: test
    
    - name: Start fullstack application
      run: |
        npm run start &
        sleep 15
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NODE_ENV: test
        PORT: 3000
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run OWASP dependency check
      run: npm run security:check
      continue-on-error: true
    
    - name: Build application for security scanning
      run: npm run build
    
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        docker run -d --name fullstack-test -p 3000:3000 \
          -e NODE_ENV=test \
          ${{ github.repository }}:${{ github.sha }}
        sleep 15
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/ || exit 1
        docker stop fullstack-test
        docker rm fullstack-test

  performance-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and start application
      run: |
        npm run build
        npm run start &
        sleep 15
      env:
        NODE_ENV: production
    
    - name: Run Lighthouse performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: Run load tests
      run: npm run test:load
      continue-on-error: true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        REACT_APP_ENV: preview
        REACT_APP_API_URL: /api
    
    - name: Deploy preview to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        destination_dir: pr-${{ github.event.number }}
    
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Fullstack Preview deployed! Check it out at: https://' + context.repo.owner + '.github.io/' + context.repo.repo + '/pr-' + context.issue.number
          })

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, security-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying React Fullstack to staging environment"
        echo "This would typically deploy both frontend and backend to staging infrastructure"
        # Example deployment commands:
        # kubectl apply -f k8s/staging/
        # helm upgrade --install fullstack-staging ./helm-chart

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-test, security-test, docker-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying React Fullstack to production environment"
        echo "This would typically deploy both frontend and backend to production infrastructure"
        # Example deployment commands:
        # kubectl apply -f k8s/production/
        # helm upgrade --install fullstack-prod ./helm-chart
    
    - name: Run post-deployment health checks
      run: |
        echo "🧪 Running post-deployment health checks"
        # curl -f ${{ vars.PRODUCTION_URL }}/health
        # npm run test:smoke -- --url=${{ vars.PRODUCTION_URL }}
    
    - name: Update monitoring dashboards
      run: |
        echo "📊 Updating monitoring dashboards and alerts"
        # This would typically update monitoring configurations
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ React Fullstack application deployed successfully to production!"
        echo "🌐 Frontend available at: ${{ vars.PRODUCTION_URL || 'https://app.example.com' }}"
        echo "🔗 API available at: ${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}"
name: React SPA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:ci
      env:
        CI: true
    
    - name: Generate test coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check bundle size
      run: npm run analyze:bundle
      continue-on-error: true

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Serve application
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        sleep 5
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: development
        CI: false
        REACT_APP_ENV: preview
        REACT_APP_API_URL: ${{ vars.STAGING_API_URL || 'https://api-dev.example.com' }}
    
    - name: Deploy to Netlify preview
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=build --message="Preview deployment for PR #${{ github.event.number }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}
    
    - name: Deploy to GitHub Pages (fallback)
      if: failure()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        destination_dir: pr-${{ github.event.number }}
    
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Preview deployed!\n' +
                  'üåê Netlify: https://${{ vars.NETLIFY_SITE_ID }}.netlify.app\n' +
                  'üåê GitHub Pages (fallback): https://' + context.repo.owner + '.github.io/' + context.repo.repo + '/pr-' + context.issue.number
          })

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        CI: false
        REACT_APP_ENV: production
        REACT_APP_API_URL: ${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}
    
    - name: Deploy to Netlify
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=build --message="Production deployment from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}
    
    - name: Deploy to GitHub Pages (fallback)
      if: failure()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        cname: ${{ vars.CUSTOM_DOMAIN }}
    
    - name: Run deployment health check
      run: |
        sleep 30
        curl -f "https://${{ vars.NETLIFY_SITE_ID }}.netlify.app" || echo "Health check failed but continuing"
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ React SPA deployed successfully to production!"
        echo "üåê Netlify URL: https://${{ vars.NETLIFY_SITE_ID }}.netlify.app"
        echo "üåê GitHub Pages (fallback): https://${{ vars.CUSTOM_DOMAIN || github.repository_owner + '.github.io/' + github.event.repository.name }}"
#!/usr/bin/env python3
"""
Test the enhanced Claude Code response parsing system.
"""

import sys
import os
import json
import re

# Add project paths
sys.path.insert(0, '/Users/rakesh/CascadeProjects/ai-pipeline-v2')
sys.path.insert(0, '/Users/rakesh/CascadeProjects/ai-pipeline-v2/shared/services')

def test_enhanced_parsing():
    """Test the enhanced parsing system with various response formats."""
    
    try:
        from claude_code_service import ClaudeCodeService
        
        # Create service instance (we'll just test parsing, not API calls)
        print("üß™ Testing Enhanced Claude Code Response Parsing")
        print("=" * 60)
        
        # Test 1: New structured format
        print("\n1. Testing NEW STRUCTURED FORMAT:")
        structured_response = """
        Here's the implementation for your user story:

        FILE: src/components/UserLogin.tsx
        TYPE: component
        LANGUAGE: typescript
        ---
        import React, { useState } from 'react';

        export const UserLogin: React.FC = () => {
          const [email, setEmail] = useState('');
          const [password, setPassword] = useState('');
          
          const handleSubmit = (e: React.FormEvent) => {
            e.preventDefault();
            // Handle login logic
            console.log('Login:', { email, password });
          };

          return (
            <form onSubmit={handleSubmit}>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                required
              />
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Password"
                required
              />
              <button type="submit">Login</button>
            </form>
          );
        };
        ---
        END_FILE

        FILE: src/services/AuthService.ts
        TYPE: service
        LANGUAGE: typescript
        ---
        export class AuthService {
          async login(email: string, password: string): Promise<{ success: boolean; token?: string }> {
            try {
              const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
              });
              
              if (response.ok) {
                const data = await response.json();
                return { success: true, token: data.token };
              }
              
              return { success: false };
            } catch (error) {
              console.error('Login error:', error);
              return { success: false };
            }
          }
        }

        export const authService = new AuthService();
        ---
        END_FILE
        """
        
        service = ClaudeCodeService()
        story = {'story_id': 'test-001', 'title': 'User Login'}
        
        files = service._parse_generated_files(structured_response, story)
        print(f"   ‚úÖ Parsed {len(files)} files from structured format")
        
        for file_data in files:
            print(f"   üìÅ {file_data['file_path']}")
            print(f"      Type: {file_data.get('file_type', 'N/A')}")
            print(f"      Language: {file_data.get('language', 'N/A')}")
            print(f"      Generated by: {file_data.get('generated_by', 'N/A')}")
            print(f"      Content: {len(file_data['content'])} characters")
        
        # Test 2: Original filepath format (fallback)
        print("\n2. Testing ORIGINAL FILEPATH FORMAT (fallback):")
        filepath_response = """
        Here's the implementation:

        ```filepath: src/components/Dashboard.tsx
        import React from 'react';

        export const Dashboard: React.FC = () => {
          return (
            <div className="dashboard">
              <h1>Welcome to Dashboard</h1>
              <div className="stats">
                <div className="stat-card">
                  <h3>Users</h3>
                  <p>1,234</p>
                </div>
              </div>
            </div>
          );
        };
        ```

        ```filepath: src/styles/Dashboard.css
        .dashboard {
          padding: 20px;
          background: #f5f5f5;
        }

        .stats {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-top: 20px;
        }

        .stat-card {
          background: white;
          padding: 16px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        ```
        """
        
        files = service._parse_generated_files(filepath_response, story)
        print(f"   ‚úÖ Parsed {len(files)} files from filepath format")
        
        for file_data in files:
            print(f"   üìÅ {file_data['file_path']}")
            print(f"      Type: {file_data.get('file_type', 'N/A')}")
            print(f"      Language: {file_data.get('language', 'N/A')}")
            print(f"      Generated by: {file_data.get('generated_by', 'N/A')}")
        
        # Test 3: Generic code blocks (last resort)
        print("\n3. Testing GENERIC CODE BLOCKS (last resort):")
        generic_response = """
        Here's a simple implementation:

        ```typescript
        export interface User {
          id: string;
          email: string;
          name: string;
          createdAt: Date;
        }

        export const validateUser = (user: Partial<User>): boolean => {
          return !!(user.email && user.name);
        };
        ```

        ```css
        .user-card {
          border: 1px solid #ddd;
          padding: 16px;
          margin: 8px 0;
          border-radius: 4px;
        }

        .user-card h3 {
          margin: 0 0 8px 0;
          color: #333;
        }
        ```
        """
        
        files = service._parse_generated_files(generic_response, story)
        print(f"   ‚úÖ Parsed {len(files)} files from generic format")
        
        for file_data in files:
            print(f"   üìÅ {file_data['file_path']}")
            print(f"      Type: {file_data.get('file_type', 'N/A')}")
            print(f"      Language: {file_data.get('language', 'N/A')}")
            print(f"      Generated by: {file_data.get('generated_by', 'N/A')}")
        
        # Test 4: Mixed format response
        print("\n4. Testing MIXED FORMAT RESPONSE:")
        mixed_response = """
        FILE: src/components/UserProfile.tsx
        TYPE: component
        LANGUAGE: typescript
        ---
        import React from 'react';

        export const UserProfile: React.FC<{ userId: string }> = ({ userId }) => {
          return <div>User Profile: {userId}</div>;
        };
        ---
        END_FILE

        ```filepath: src/utils/helpers.ts
        export const formatDate = (date: Date): string => {
          return date.toLocaleDateString();
        };

        export const capitalize = (str: string): string => {
          return str.charAt(0).toUpperCase() + str.slice(1);
        };
        ```
        """
        
        files = service._parse_generated_files(mixed_response, story)
        print(f"   ‚úÖ Parsed {len(files)} files from mixed format")
        
        for file_data in files:
            print(f"   üìÅ {file_data['file_path']}")
            print(f"      Generated by: {file_data.get('generated_by', 'N/A')}")
        
        # Test 5: Error case - unparseable response
        print("\n5. Testing UNPARSEABLE RESPONSE:")
        bad_response = """
        This is just plain text without any code blocks
        or structured format. The parsing should handle
        this gracefully and return empty list.
        """
        
        files = service._parse_generated_files(bad_response, story)
        print(f"   ‚úÖ Handled unparseable response: {len(files)} files (should be 0)")
        
        print("\n" + "=" * 60)
        print("üéâ ENHANCED PARSING SYSTEM TESTS COMPLETED!")
        print("‚úÖ All parsing strategies working correctly")
        print("‚úÖ Fallback mechanisms functioning properly")
        print("‚úÖ Error handling gracefully manages bad input")
        print("‚úÖ File metadata inference working")
        print("‚úÖ Ready for deployment to Lambda!")
        
    except ImportError as e:
        print(f"‚ùå Could not import claude_code_service: {e}")
        print("This is expected if Claude Code SDK is not available locally")
        print("Testing individual parsing functions...")
        
        # Test regex patterns directly
        test_regex_patterns()
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()

def test_regex_patterns():
    """Test the regex patterns directly without the service."""
    print("\nüß™ Testing Regex Patterns Directly:")
    
    # Test structured format regex
    structured_pattern = r'FILE:\s*([^\n]+)\s*\nTYPE:\s*([^\n]+)\s*\nLANGUAGE:\s*([^\n]+)\s*\n---\s*\n(.*?)\n---\s*\nEND_FILE'
    structured_test = """FILE: src/test.tsx
TYPE: component
LANGUAGE: typescript
---
const Test = () => <div>Hello</div>;
---
END_FILE"""
    
    matches = re.findall(structured_pattern, structured_test, re.DOTALL | re.MULTILINE)
    print(f"   ‚úÖ Structured format regex: Found {len(matches)} matches")
    if matches:
        filepath, file_type, language, content = matches[0]
        print(f"      üìÅ File: {filepath}")
        print(f"      üìù Type: {file_type}")
        print(f"      üî§ Language: {language}")
        print(f"      üìÑ Content: {len(content)} chars")
    
    # Test filepath format regex
    filepath_pattern = r'```filepath:\s*([^\n]+)\n(.*?)```'
    filepath_test = """```filepath: src/example.ts
export const example = 'test';
```"""
    
    matches = re.findall(filepath_pattern, filepath_test, re.DOTALL)
    print(f"   ‚úÖ Filepath format regex: Found {len(matches)} matches")
    if matches:
        filepath, content = matches[0]
        print(f"      üìÅ File: {filepath}")
        print(f"      üìÑ Content: {len(content)} chars")
    
    # Test generic code blocks regex
    generic_pattern = r'```(\w+)\n(.*?)```'
    generic_test = """```typescript
export interface User {
  id: string;
  name: string;
}
```"""
    
    matches = re.findall(generic_pattern, generic_test, re.DOTALL)
    print(f"   ‚úÖ Generic blocks regex: Found {len(matches)} matches")
    if matches:
        language, content = matches[0]
        print(f"      üî§ Language: {language}")
        print(f"      üìÑ Content: {len(content)} chars")

if __name__ == "__main__":
    test_enhanced_parsing()
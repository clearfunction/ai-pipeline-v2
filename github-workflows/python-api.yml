name: Python API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run code formatting checks
      run: |
        poetry run black --check .
        poetry run isort --check-only .
    
    - name: Run linting
      run: poetry run flake8 .
    
    - name: Run type checking
      run: poetry run mypy .
    
    - name: Run database migrations
      run: poetry run alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: Run unit tests
      run: poetry run pytest tests/unit -v --cov=src --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: poetry run pytest tests/integration -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run security audit
      run: |
        poetry run bandit -r src/
        poetry run safety check
    
    - name: Run performance tests
      run: poetry run pytest tests/performance -v
      continue-on-error: true
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        docker run -d --name api-test -p 8000:8000 ${{ github.repository }}:${{ github.sha }}
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop api-test
        docker rm api-test

  api-contract-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Start API server
      run: |
        poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        ENVIRONMENT: test
    
    - name: Run API contract tests
      run: poetry run pytest tests/contract -v
    
    - name: Generate OpenAPI schema
      run: |
        curl http://localhost:8000/openapi.json > openapi.json
        poetry run python scripts/validate_openapi.py openapi.json
    
    - name: Upload OpenAPI schema
      uses: actions/upload-artifact@v4
      with:
        name: openapi-schema
        path: openapi.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run additional security checks
      run: |
        poetry run semgrep --config=auto .
        poetry run pip-audit
      continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying Python API to staging environment"
        echo "This would typically deploy to your staging infrastructure"
        # Example deployment commands:
        # kubectl apply -f k8s/staging/
        # helm upgrade --install api-staging ./helm-chart
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running staging smoke tests"
        # curl -f ${{ vars.STAGING_API_URL }}/health

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build, api-contract-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
    
    - name: Build and push Docker image
      run: |
        # Build Docker image
        docker build -t ${{ github.repository }}:${{ github.sha }} .
        
        # Tag for ECR
        aws ecr get-login-password --region ${{ vars.AWS_REGION || 'us-east-1' }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com
        docker tag ${{ github.repository }}:${{ github.sha }} ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}
        docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}
    
    - name: Deploy to ECS Fargate
      run: |
        # Update ECS service with new task definition
        echo "üöÄ Deploying Python API to ECS Fargate"
        
        # Get current task definition
        TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster ai-pipeline-v2-prod --services ${{ github.event.repository.name }}-api-prod --query 'services[0].taskDefinition' --output text)
        
        if [ "$TASK_DEFINITION_ARN" != "None" ]; then
          # Update existing service
          aws ecs update-service --cluster ai-pipeline-v2-prod --service ${{ github.event.repository.name }}-api-prod --force-new-deployment
        else
          echo "‚ö†Ô∏è  Service not found. Manual setup required."
        fi
    
    - name: Wait for deployment to complete
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        aws ecs wait services-stable --cluster ai-pipeline-v2-prod --services ${{ github.event.repository.name }}-api-prod || echo "Deployment wait timeout"
    
    - name: Run post-deployment health checks
      run: |
        echo "üß™ Running post-deployment health checks"
        API_URL="${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}"
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        curl -f "$API_URL/health" || echo "Health check failed but continuing"
        
        # OpenAPI docs check
        curl -f "$API_URL/docs" || echo "API docs check failed but continuing"
    
    - name: Update API documentation
      run: |
        echo "üìö API documentation available at:"
        echo "${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}/docs"
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Python API deployed successfully to ECS Fargate!"
        echo "üåê API available at: ${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}"
        echo "üìñ Documentation: ${{ vars.PRODUCTION_API_URL || 'https://api.example.com' }}/docs"
        echo "üê≥ Docker image: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}"
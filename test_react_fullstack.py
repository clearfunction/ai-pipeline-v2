#!/usr/bin/env python3
"""
Test script for React Fullstack template generator implementation.
This script validates that the react_fullstack tech stack is properly supported.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'lambdas/core/story-executor'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'shared'))

def test_template_factory():
    """Test that the template factory has react_fullstack registered."""
    from templates.template_factory import template_factory, TechStack
    
    print("Testing Template Factory...")
    
    # Check if REACT_FULLSTACK is in TechStack
    assert hasattr(TechStack, 'REACT_FULLSTACK'), "TechStack.REACT_FULLSTACK not defined"
    assert TechStack.REACT_FULLSTACK == 'react_fullstack', "TechStack.REACT_FULLSTACK value incorrect"
    
    # Check if factory supports react_fullstack
    assert template_factory.is_supported('react_fullstack'), "react_fullstack not supported by factory"
    
    # Try to create a generator
    generator = template_factory.create_generator('react_fullstack')
    assert generator is not None, "Failed to create react_fullstack generator"
    
    print("✅ Template factory test passed")
    return True


def test_generator_creation():
    """Test that the React Fullstack generator can be instantiated."""
    from templates.react_fullstack_generator import ReactFullstackTemplateGenerator
    
    print("Testing React Fullstack Generator...")
    
    generator = ReactFullstackTemplateGenerator()
    assert generator is not None, "Failed to instantiate ReactFullstackTemplateGenerator"
    assert generator.get_supported_runtime() == 'node', "Incorrect runtime"
    assert 'fullstack' in generator.get_description().lower(), "Description doesn't mention fullstack"
    
    print("✅ Generator creation test passed")
    return True


def test_project_generation():
    """Test that the generator can create project files."""
    from templates.react_fullstack_generator import ReactFullstackTemplateGenerator
    
    print("Testing Project Generation...")
    
    generator = ReactFullstackTemplateGenerator()
    
    # Mock architecture object
    class MockArchitecture:
        def __init__(self):
            self.tech_stack = 'react_fullstack'
            self.name = 'test-fullstack-project'
            self.components = []
            self.dependencies = {'react': '^18.2.0'}
            self.build_config = {'package_manager': 'npm'}
    
    mock_arch = MockArchitecture()
    
    # Generate project files
    files = generator.generate_project_scaffold('test-project', mock_arch)
    
    assert len(files) > 0, "No files generated"
    
    # Check for critical files
    file_paths = [f.file_path for f in files]
    
    critical_files = [
        'package.json',
        'package-lock.json',
        'docker-compose.yml',
        'client/package.json',
        'client/src/App.tsx',
        'server/package.json',
        'server/src/app.ts',
        'shared/package.json',
        '.github/workflows/ci-cd.yml'
    ]
    
    for critical_file in critical_files:
        assert critical_file in file_paths, f"Missing critical file: {critical_file}"
    
    print(f"✅ Project generation test passed - {len(files)} files generated")
    return True


def test_refactored_service():
    """Test that the refactored service no longer maps react_fullstack to react_spa."""
    from refactored_project_generator_service import RefactoredProjectGeneratorService
    
    print("Testing Refactored Service...")
    
    service = RefactoredProjectGeneratorService()
    
    # Mock architecture object
    class MockArchitecture:
        def __init__(self):
            self.tech_stack = 'react_fullstack'
            self.name = 'test-fullstack-project'
            self.components = []
    
    mock_arch = MockArchitecture()
    
    # This should not raise an error now that react_fullstack is supported
    try:
        files = service.generate_project_scaffold(mock_arch)
        assert len(files) > 0, "No files generated by service"
        print(f"✅ Refactored service test passed - {len(files)} files generated")
        return True
    except ValueError as e:
        if 'Unsupported tech stack' in str(e):
            print(f"❌ react_fullstack still not properly supported: {e}")
            return False
        raise


def main():
    """Run all tests."""
    print("=" * 60)
    print("React Fullstack Implementation Test Suite")
    print("=" * 60)
    print()
    
    tests = [
        test_template_factory,
        test_generator_creation,
        test_project_generation,
        test_refactored_service
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"❌ {test.__name__} failed: {e}")
            failed += 1
    
    print()
    print("=" * 60)
    print(f"Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("🎉 All tests passed! React Fullstack support is fully implemented.")
    else:
        print(f"⚠️  {failed} test(s) failed. Please review the implementation.")
    
    return failed == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)